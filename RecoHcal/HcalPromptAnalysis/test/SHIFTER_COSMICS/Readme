1. For <A> vs LS over 4 kvadrants P1, P2, M1, M2:
(HB - 1;     HE - 3;   HF - 6 ;    HO - 8 ; )
      c1->cd(1);
      TH1F *twod3= (TH1F*)hfile1->Get("h_sumADCAmplperLS6_P1" );
      TH1F *twod2= (TH1F*)hfile1->Get("h_sum0ADCAmplperLS6_P1");
      twod3->Sumw2();
      twod2->Sumw2();
      if(twod2->IsA()->InheritsFrom("TH1F")){
	TH1F* ERT1 = (TH1F*)twod3->Clone("ERT1");
	ERT1->Divide(twod3,twod2, 1, 1, "B");
	ERT1->Sumw2();
      ERT1->SetMarkerStyle(20);
      ERT1->SetMarkerSize(0.4);
      ERT1->SetXTitle("<A>(ev.in LS & ch.) - HF P1     -    iLS \b");
      ERT1->SetMarkerColor(2);
      ERT1->SetLineColor(0);
      ERT1->Draw("Error");
... -> do similar for h_sumADCAmplperLS6_P2,h_sumADCAmplperLS6_M1, M2...

(use different colors)
      }

      c1->cd(2);
      TH1F* diff = new TH1F("diff","", 100, 0., 4.);
      int nx = ERT1->GetXaxis()->GetNbins();
      for (int i=1;i<=nx;i++) {
	double ccc1 =  ERT1->GetBinContent(i);
	double ccc2 =  ERT2->GetBinContent(i);
	double ccc3 =  ERT3->GetBinContent(i);
	double ccc4 =  ERT4->GetBinContent(i);
	if(ccc1 > 0. ) {
	  double delta = ccc1-ccc2;
	  delta = fabs(delta);
	  if(fabs(ccc1-ccc3) > delta ) delta=fabs(ccc1-ccc3);
	  if(fabs(ccc1-ccc4) > delta ) delta=fabs(ccc1-ccc4);
	  if(fabs(ccc2-ccc3) > delta ) delta=fabs(ccc2-ccc3);
	  if(fabs(ccc2-ccc4) > delta ) delta=fabs(ccc2-ccc4);
	  if(fabs(ccc3-ccc4) > delta ) delta=fabs(ccc3-ccc4);
	  
	  diff->Fill(delta);
	}
      }
      diff->SetMarkerStyle(20);
      diff->SetMarkerSize(0.4);
      diff->SetXTitle("max difference \b");
      diff->SetMarkerColor(2);
      diff->SetLineColor(0);
      //    diff->SetMaximum(110.);
      //    diff->SetMinimum(30.0);
      gPad->SetGridy();
      gPad->SetLogy();
      diff->Draw("Error");


TO IDENTIFY: max difference between dependencies to be within 0.8-2.4 
It's main plot for errors-A (other plots only for confirmation)

2. For Error of Type-B: (here HFdepth1)

      c1->cd(1);
      TH2F *twod1= (TH2F*)hfile1->Get("h_2DsumErrorBLS6");
      TH2F *twod0= (TH2F*)hfile1->Get("h_2D0sumErrorBLS6");
      twod1->Sumw2();
      twod0->Sumw2();
      if(twod0->IsA()->InheritsFrom("TH2F")){
	TH2F* Cefz6= (TH2F*)twod1->Clone("Cefz6");
	Cefz6->Divide(twod1,twod0, 1, 1, "B");
	Cefz6->Sumw2();
      }
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      Cefz6->SetMarkerStyle(20);
      Cefz6->SetMarkerSize(0.4);
      Cefz6->GetZaxis()->SetLabelSize(0.08);
      Cefz6->SetXTitle("#eta \b");
      Cefz6->SetYTitle("#phi \b");
      Cefz6->SetZTitle("<ErrorB>  - HF Depth1 \b");
      Cefz6->SetMarkerColor(2);
      Cefz6->SetLineColor(2);
      Cefz6->Draw("COLZ");

      c1->cd(2);
      TH1F *twod3= (TH1F*)hfile1->Get("h_sumErrorBperLS6");
      TH1F *twod2= (TH1F*)hfile1->Get("h_sum0ErrorBperLS6");
      twod3->Sumw2();
      twod2->Sumw2();
      gPad->SetGridy();
      gPad->SetLogy();
      if(twod2->IsA()->InheritsFrom("TH1F")){
	TH1F* Rate2 = (TH1F*)twod3->Clone("Rate2");
	Rate2->Divide(twod3,twod2, 1, 1, "B");
	Rate2->Sumw2();
      }
      Rate2->SetMarkerStyle(20);
      Rate2->SetMarkerSize(0.8);
      Rate2->SetXTitle("<ErrorB>(ev.in LS & ch.) - HF depth1 -    iLS \b");
      Rate2->SetMarkerColor(2);
      Rate2->SetLineColor(0);
      Rate2->Draw("Error");

TO IDENTIFY: define error-B as digi-collection size != 4;
(usually, proportion of events affected by errors-B per LS is too low 
-> do we need to certify whole LSs as BAD)



3. For  2D and  1D plots with Amplitude:
      c1->cd(1);
      TH2F *twod1= (TH2F*)hfile1->Get("h_mapDepth1ADCAmpl_HF");
      TH2F *twod0= (TH2F*)hfile1->Get("h_mapDepth1_HF");
      twod1->Sumw2();
      twod0->Sumw2();
      if(twod0->IsA()->InheritsFrom("TH2F")){
	TH2F* Ceff = (TH2F*)twod1->Clone("Ceff");
	Ceff->Divide(twod1,twod0, 1, 1, "B");
	Ceff->Sumw2();
      }
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      Ceff->SetMarkerStyle(20);
      Ceff->SetMarkerSize(0.4);
      Ceff->GetZaxis()->SetLabelSize(0.08);
      Ceff->SetXTitle("#eta \b");
      Ceff->SetYTitle("#phi \b");
      Ceff->SetZTitle("h_mapDepth1ADCAmpl_HF \b");
      Ceff->SetMarkerColor(2);
      Ceff->SetLineColor(2);
      Ceff->Draw("COLZ");
            
TO IDENTIFY: see red bins in eta-phi space (applied cut on Aij: <20 || >3000




      c1->cd(2);
    ///////////////////////////////////////
    TH2F* Diffe_Depth1_HF = (TH2F*)Ceff->Clone("Diffe_Depth1_HF");
    int nx = Ceff->GetXaxis()->GetNbins();
    int ny = Ceff->GetYaxis()->GetNbins();
    for (int i=1;i<=nx;i++) {
      for (int j=1;j<=ny;j++) {
	  double ccc1 =  Ceff->GetBinContent(i,j)   ;
	  Diffe_Depth1_HF->SetBinContent(i,j,0.);
	  if(ccc1 > 20.)  Diffe_Depth1_HF->SetBinContent(i,j,ccc1);
      }
    }
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      Diffe_Depth1_HF->SetMarkerStyle(20);
      Diffe_Depth1_HF->SetMarkerSize(0.4);
      Diffe_Depth1_HF->GetZaxis()->SetLabelSize(0.08);
      Diffe_Depth1_HF->SetXTitle("#eta \b");
      Diffe_Depth1_HF->SetYTitle("#phi \b");
      Diffe_Depth1_HF->SetZTitle("<ADCAmpl> bigger 20.- HF Depth1 \b");
      Diffe_Depth1_HF->SetMarkerColor(2);
      Diffe_Depth1_HF->SetLineColor(2);
      Diffe_Depth1_HF->Draw("COLZ");
TO IDENTIFY: see color different bins in eta-phi space 


      c1->cd(3);
      TH2F *twod1= (TH2F*)hfile1->Get("h_mapDepth1ADCAmpl_HF");
      TH2F *twod0= (TH2F*)hfile1->Get("h_mapDepth1_HF");
      twod1->Sumw2();
      twod0->Sumw2();
      if(twod0->IsA()->InheritsFrom("TH2F")){
	TH2F* Ceff = (TH2F*)twod1->Clone("Ceff");
	Ceff->Divide(twod1,twod0, 1, 1, "B");
	Ceff->Sumw2();//      ADCAmplperLS2 ->SetXTitle("<ADCAmpl> per LS HB1 \b");

      }
      TH1F* diffADCAmpl_Depth1_HF = new TH1F("diffADCAmpl_Depth1_HF","", 100, -20.,200.);
      int nx = Ceff->GetXaxis()->GetNbins();
      int ny = Ceff->GetYaxis()->GetNbins();
      for (int i=1;i<=nx;i++) {
	for (int j=1;j<=ny;j++) {
	  if(Ceff->GetBinContent(i,j) !=0 ) {
	    double ccc1 =  Ceff->GetBinContent(i,j) ;
	    diffADCAmpl_Depth1_HF->Fill(ccc1);
	  }
	}
      }
      gPad->SetLogy();
      diffADCAmpl_Depth1_HF->SetMarkerStyle(20);
      diffADCAmpl_Depth1_HF->SetMarkerSize(0.4);
      diffADCAmpl_Depth1_HF->GetYaxis()->SetLabelSize(0.04);
      diffADCAmpl_Depth1_HF->SetXTitle("<ADCAmpl> in each cell \b");
      diffADCAmpl_Depth1_HF->SetMarkerColor(2);
      diffADCAmpl_Depth1_HF->SetLineColor(2);
      diffADCAmpl_Depth1_HF->Draw("");



4.For occupancy plots:

      TH2F *twod1= (TH2F*)hfile1->Get("h_mapDepth1ADCAmpl_HF");
      TH2F *twod0= (TH2F*)hfile1->Get("h_mapDepth1_HF");
      twod1->Sumw2();
      twod0->Sumw2();
      if(twod0->IsA()->InheritsFrom("TH2F")){
	TH2F* Cefz= (TH2F*)twod1->Clone("Cefz");
	Cefz->Divide(twod1,twod0, 1, 1, "B");
	Cefz->Sumw2();
      }
      TH2F *Cefz225= (TH2F*)hfile1->Get("h_mapDepth1_HF");



      c1->cd(1);
      TH1F* ADCAmplperLS  = new TH1F("ADCAmplperLS ","", 72, 1.,73.);
      TH2F* Diffe_Depth1_HF = (TH2F*)Cefz225->Clone("h_mapDepth1_HF ");
      int nx = Cefz225->GetXaxis()->GetNbins();
      int ny = Cefz225->GetYaxis()->GetNbins();
      int ncountall=0;
      int ncountmin=0;
      int nnnmin=100000000;
      int nnnbins=0;
      for (int j=1;j<=ny;j++) {
//	cout<<" HF-    ****************   j = "<<   j    <<endl;
	
	for (int i=1;i<=nx;i++) {
	  if(i< 42) {
	    //	    if(Cefz->GetBinContent(i,j) > 0.) cout<<" i = "<<i<<" j = "<<j<<"  BinContent= "<<    Cefz->GetBinContent(i,j)    <<endl;
	    
	    // no cuts - take all
	    //	    	    if(Cefz->GetBinContent(i,j)> -10.) {
	    // cut on RMS:
	    //	    if(Cefz->GetBinContent(i,j)> 1.) {
	    // cut on Amplitude
	    if(Cefz->GetBinContent(i,j)> 20.) {
	      
	      
	      double ccc1 =  Cefz225->GetBinContent(i,j);
	      if(ccc1>0.) {
		ADCAmplperLS ->Fill(float(j), ccc1);
		ncountall += ccc1 ;
		ncountmin += ccc1;
	      }
	    }
	  }
	}
	if(ncountmin> 0) {
//	  cout<<" HF-    - ncountmin = "<<   ncountmin    <<" ncountall  = "<<   ncountall    <<endl;
	  if(ncountmin < nnnmin ) nnnmin = ncountmin;
	  ncountmin=0;
	  nnnbins++;
	}
      }
//      cout<<" HF-    - ncountall = "<<   ncountall    <<" nnnmin= "<<   nnnmin    <<" nnnbins= "<<   nnnbins    <<" Ave= "<<   ncountall/nnnbins    <<endl;
      if(nnnmin > 0.) cout<<" HF-    - ncountall/nnnbins/nnnmin = "<<   (float)ncountall/nnnbins/nnnmin    <<endl;
      

      //      gPad->SetLogy();
      ADCAmplperLS ->SetMarkerStyle(20);
      ADCAmplperLS ->SetMarkerSize(0.4);
      ADCAmplperLS ->GetYaxis()->SetLabelSize(0.04);
//      ADCAmplperLS ->SetXTitle("<ADCAmpl> per LS HB1 \b");
      ADCAmplperLS ->SetMarkerColor(2);
      ADCAmplperLS ->SetLineColor(4);
//      ADCAmplperLS ->SetMaximum(30.0);
//      ADCAmplperLS ->SetMinimum(25.0);
      ADCAmplperLS->SetXTitle(" #hits vs Phi for  HF-  cut:A>20\\b");
      ADCAmplperLS ->Draw();
      
      /////////////////////////////////////////////////////////////////////////////////////////////////
      c1->cd(2);
      TH1F* ADCAmplperLS2  = new TH1F("ADCAmplperLS2 ","", 72, 1.,73.);
      TH2F* Diffe_Depth1_HF = (TH2F*)Cefz225->Clone("h_mapDepth1_HF ");
      int nx = Cefz225->GetXaxis()->GetNbins();
      int ny = Cefz225->GetYaxis()->GetNbins();
      int ncountall=0;
      int ncountmin=0;
      int nnnmin=100000000;
      int nnnbins=0;
      for (int j=1;j<=ny;j++) {
//	cout<<" HF-    ****************   j = "<<   j    <<endl;
	
	for (int i=1;i<=nx;i++) {
	  if(i> 41) {
	    
	    
	    
	    // no cuts - take all
//	    	    if(Cefz->GetBinContent(i,j)> -10.) {
	    // cut on RMS:
//	    if(Cefz->GetBinContent(i,j)> 1.) {
	      // cut on Amplitude
	    if(Cefz->GetBinContent(i,j)> 20.) {


	      double ccc1 =  Cefz225->GetBinContent(i,j);
	      if(ccc1>0.) {
		ADCAmplperLS2 ->Fill(float(j), ccc1);
		ncountall += ccc1 ;
		ncountmin += ccc1;
	      }
	    }
	  }
	}
	if(ncountmin> 0) {
//	  cout<<" HF+    - ncountmin = "<<   ncountmin    <<" ncountall  = "<<   ncountall    <<endl;
	  if(ncountmin < nnnmin ) nnnmin = ncountmin;
	  ncountmin=0;
	  nnnbins++;
	}
      }
//      cout<<" HF+    - ncountall = "<<   ncountall    <<" nnnmin= "<<   nnnmin    <<" nnnbins= "<<   nnnbins    <<" Ave= "<<   ncountall/nnnbins    <<endl;
      if(nnnmin > 0.) cout<<" HF+    - ncountall/nnnbins/nnnmin = "<<   (float)ncountall/nnnbins/nnnmin    <<endl;
      



      //      gPad->SetLogy();
      ADCAmplperLS2 ->SetMarkerStyle(20);
      ADCAmplperLS2 ->SetMarkerSize(0.4);
      ADCAmplperLS2 ->GetYaxis()->SetLabelSize(0.04);
      ADCAmplperLS2 ->SetMarkerColor(2);
      ADCAmplperLS2 ->SetLineColor(4);
//      ADCAmplperLS2 ->SetMaximum(30.0);
//      ADCAmplperLS2 ->SetMinimum(25.0);
      ADCAmplperLS2->SetXTitle(" #hits vs Phi for  HF+ cut:A>20\b");
      ADCAmplperLS2 ->Draw("");
      
TO IDENTIFY: see deep gaps( not one bin)



      /////////////////////////////////////////////////////////////////////////////////////////////////
      c1->cd(3);
      TH2F *Cefz225= (TH2F*)hfile1->Get("h_RatioOccupancy_HFM");

h_RatioOccupancy_HBM
h_RatioOccupancy_HEM
h_RatioOccupancy_HOM

...
      c1->cd(4);
      TH2F *Cefz225= (TH2F*)hfile1->Get("h_RatioOccupancy_HFP");

h_RatioOccupancy_HBP
h_RatioOccupancy_HEP
h_RatioOccupancy_HOP


...




5. Estimators (per LS) based on total Amplitude of each sub-detsctor: HB, HE, HF, HO.

a) channel amplitude summed over channels of each sub-detector and then averaged over events of LS:
( cuts on Ai-"channel Amplitude": Ai_HB>80; Ai_HE>200; Ai_HF>600; Ai_HO>1200 )
      c1->cd(1);
      TH1F *aaaaaa1= (TH1F*)hfile1->Get("h_aversumamplitude_HB");
      gPad->SetGridx();
      aaaaaa1->SetMarkerStyle(20);
      aaaaaa1->SetMarkerSize(0.8);
      aaaaaa1->GetYaxis()->SetLabelSize(0.04);
      aaaaaa1->SetXTitle("aversumamplitude per LS  HB    \b");
      aaaaaa1->SetMarkerColor(4);
      aaaaaa1->SetLineColor(0);
      aaaaaa1->SetMinimum(0.8);
      aaaaaa1->Draw("Error");


b) corresponding to a) occupancies:
       c1->cd(1);
      TH1F *aaaaaa1= (TH1F*)hfile1->Get("h_averoccupancy_HB");
      gPad->SetGridx();
      aaaaaa1->SetMarkerStyle(20);
      aaaaaa1->SetMarkerSize(0.8);
      aaaaaa1->GetYaxis()->SetLabelSize(0.04);
      aaaaaa1->SetXTitle("averoccupancy per LS  HB    \b");
      aaaaaa1->SetMarkerColor(4);
      aaaaaa1->SetLineColor(0);
      aaaaaa1->Draw("Error");
 
c) channel amplitude summed over channels of each sub-detector and then averaged over events of LS:
( cuts on Ai-"channel Amplitude": Ai_HB<80; Ai_HE<200; Ai_HF<600; Ai_HO<1200 )

      c1->cd(1);
      TH1F *aaaaaa1= (TH1F*)hfile1->Get("h_maxxSUMAmpl_HB");
      gPad->SetGridx();
      aaaaaa1->SetMarkerStyle(20);
      aaaaaa1->SetMarkerSize(0.8);
      aaaaaa1->GetYaxis()->SetLabelSize(0.04);
      aaaaaa1->SetXTitle("SumA of low A channels per LS  HB    \b");
      aaaaaa1->SetMarkerColor(4);
      aaaaaa1->SetLineColor(0);
      aaaaaa1->SetMinimum(0.8);
      aaaaaa1->Draw("Error");

d) corresponding to c) occupancies:
       c1->cd(1);
      c1->cd(1);
      TH1F *aaaaaa1= (TH1F*)hfile1->Get("h_maxxOCCUP_HB");
      gPad->SetGridx();
      aaaaaa1->SetMarkerStyle(20);
      aaaaaa1->SetMarkerSize(0.8);
      aaaaaa1->GetYaxis()->SetLabelSize(0.04);
      aaaaaa1->SetXTitle("Occup. of low A channels per LS  HB    \b");
      aaaaaa1->SetMarkerColor(4);
      aaaaaa1->SetLineColor(0);
      aaaaaa1->SetMinimum(0.8);
      aaaaaa1->Draw("Error");
