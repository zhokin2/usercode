

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



if(studyRunDependenceHist_ && flagtodefinebadchannel_==1) ++badchannels[sub-1][mdepth-1][ieta+41][iphi];

if(amplitude > forallestimators_amplitude_bigger_) sumEstimator5[sub-1][mdepth-1][ieta+41][iphi] += ratio;
  ////////////////////////////////////////////////////////////////////  TREATMENT OF OBTAINED DIGI-COLLECTION INFORMATION:
  /////////////////////////////////////////////////////////////  
  //////////////////////////////////////////////////////  
  //////////// k0(sub): =0 HB; =1 HE; =2 HO; =3 HF;
  //////////// k1(depth-1): = 0 - 6 or depth: = 1 - 7;
  
  int maxtestmetka=550;
  int testcount1=0;
  int testcount2=0;
  int testcount3=0;
  
  for(int k0 = 0; k0<4; k0++) {
    int sumofchannels = 0;
    double sumamplitudesubdet = 0.;	
    int sumofchannels0 = 0;
    double sumamplitudesubdet0 = 0.;	
    if (verbosity == -9129 && k0==3) testmetka++;
    if (verbosity == -9129 && k0==3 && testmetka== maxtestmetka) std::cout << " ==================================================================================== =  " << std::endl;

    //  for(int k1 = 0; k1<4; k1++) {
    for(int k2 = 0; k2<82; k2++) {
      if (verbosity == -9814 && k0==3) std::cout << "===loop   lscounterM1 =  " <<lscounterM1 <<"k3=70 for   sumamplitudechannel_HF depth1 =  " <<amplitudechannel[k0][0][k2][70] <<"k3=70 for   sumamplitudechannel_HF depth2=  " <<amplitudechannel[k0][1][k2][70] << "   k2 =  " <<k2 << std::endl;

      for(int k3 = 0; k3<72; k3++) {

	if (verbosity == -9129 && k0==3 && testmetka== maxtestmetka && (amplitudechannel[k0][0][k2][k3] !=0. || amplitudechannel[k0][1][k2][k3] !=0.)  ) {
	  std::cout << "===loop   lscounterM1 =  " <<lscounterM1 <<" sumamplitudechannel_HF depth1 =  " <<amplitudechannel[k0][0][k2][k3] <<" sumamplitudechannel_HF depth2=  " <<amplitudechannel[k0][1][k2][k3] << " k2 =  " <<k2 << " k3 =  " <<k3 << std::endl;
	  
	  if(amplitudechannel[k0][0][k2][k3]!=0. && amplitudechannel[k0][1][k2][k3]!=0.) testcount1++;
	  
	  if(amplitudechannel[k0][0][k2][k3]!=0. && amplitudechannel[k0][1][k2][k3]==0.) testcount2++;
	  if(amplitudechannel[k0][0][k2][k3]!=0. && amplitudechannel[k0][1][k2][k3]==0.) std::cout << "===CASE 2:   lscounterM1 =  " <<lscounterM1 <<" sumamplitudechannel_HF depth1 =  " <<amplitudechannel[k0][0][k2][k3] <<" sumamplitudechannel_HF depth2=  " <<amplitudechannel[k0][1][k2][k3] << " k2 =  " <<k2 << " k3 =  " <<k3 << std::endl;
	  
	  if(amplitudechannel[k0][0][k2][k3]==0. && amplitudechannel[k0][1][k2][k3]!=0.) testcount3++;
	  if(amplitudechannel[k0][0][k2][k3]==0. && amplitudechannel[k0][1][k2][k3]!=0.) std::cout << "===CASE 3:   lscounterM1 =  " <<lscounterM1 <<" sumamplitudechannel_HF depth1 =  " <<amplitudechannel[k0][0][k2][k3] <<" sumamplitudechannel_HF depth2=  " <<amplitudechannel[k0][1][k2][k3] << " k2 =  " <<k2 << " k3 =  " <<k3 << std::endl;
	}       

	// HB
	if( k0 == 0 ) {
	  double sumamplitudechannel_HB = amplitudechannel[k0][0][k2][k3]+amplitudechannel[k0][1][k2][k3];
	  h_sumamplitudechannel_HB->Fill(sumamplitudechannel_HB);
	  if( sumamplitudechannel_HB   >      80.) {
	    sumamplitudesubdet += sumamplitudechannel_HB;
	    sumofchannels++;
	  }
	  else {
	    if( sumamplitudechannel_HB   >  0.) {
	      sumamplitudesubdet0 += sumamplitudechannel_HB;
	      sumofchannels0++;
	    }
	  }
	}//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //------------------------------------------------------                        averNOSIGNAL
    averNOSIGNALoccupancy_HB /= float(nevcounter0);
    h_averNOSIGNALoccupancy_HB->Fill( float(lscounterM1) ,averNOSIGNALoccupancy_HB);
    averNOSIGNALoccupancy_HE /= float(nevcounter0);
    h_averNOSIGNALoccupancy_HE->Fill( float(lscounterM1) ,averNOSIGNALoccupancy_HE);
    averNOSIGNALoccupancy_HF /= float(nevcounter0);
    h_averNOSIGNALoccupancy_HF->Fill( float(lscounterM1) ,averNOSIGNALoccupancy_HF);
    averNOSIGNALoccupancy_HO /= float(nevcounter0);
    h_averNOSIGNALoccupancy_HO->Fill( float(lscounterM1) ,averNOSIGNALoccupancy_HO);

    averNOSIGNALoccupancy_HB = 0.;
    averNOSIGNALoccupancy_HE = 0.;
    averNOSIGNALoccupancy_HF = 0.;
    averNOSIGNALoccupancy_HO = 0.;
    
    //------------------------------------------------------
    averNOSIGNALsumamplitude_HB /= float(nevcounter0);
    h_averNOSIGNALsumamplitude_HB->Fill( float(lscounterM1) ,averNOSIGNALsumamplitude_HB);
    averNOSIGNALsumamplitude_HE /= float(nevcounter0);
    h_averNOSIGNALsumamplitude_HE->Fill( float(lscounterM1) ,averNOSIGNALsumamplitude_HE);
    averNOSIGNALsumamplitude_HF /= float(nevcounter0);
    h_averNOSIGNALsumamplitude_HF->Fill( float(lscounterM1) ,averNOSIGNALsumamplitude_HF);
    averNOSIGNALsumamplitude_HO /= float(nevcounter0);
    h_averNOSIGNALsumamplitude_HO->Fill( float(lscounterM1) ,averNOSIGNALsumamplitude_HO);

    averNOSIGNALsumamplitude_HB = 0.;
    averNOSIGNALsumamplitude_HE = 0.;
    averNOSIGNALsumamplitude_HF = 0.;
    averNOSIGNALsumamplitude_HO = 0.;
    
    //------------------------------------------------------   maxxSA and maxxOccupancy
    if (verbosity == -9812 ) std::cout << "************* lscounterM1= " <<lscounterM1 << "   maxxSUM1 =  " <<maxxSUM1 << "   nevcounter0 =  " <<nevcounter0 << std::endl;
    if (verbosity == -9812 ) std::cout << "after dividing   maxxSUM1 =  " <<maxxSUM1 << std::endl;
    h_maxxSUMAmpl_HB->Fill( float(lscounterM1) ,maxxSUM1);
    h_maxxSUMAmpl_HE->Fill( float(lscounterM1) ,maxxSUM2);
    h_maxxSUMAmpl_HO->Fill( float(lscounterM1) ,maxxSUM3);
    h_maxxSUMAmpl_HF->Fill( float(lscounterM1) ,maxxSUM4);
    maxxSUM1 = 0.;
    maxxSUM2 = 0.;
    maxxSUM3 = 0.;
    maxxSUM4 = 0.;
    //------------------------------------------------------
    h_maxxOCCUP_HB->Fill( float(lscounterM1) ,maxxOCCUP1);
    h_maxxOCCUP_HE->Fill( float(lscounterM1) ,maxxOCCUP2);
    h_maxxOCCUP_HO->Fill( float(lscounterM1) ,maxxOCCUP3);
    h_maxxOCCUP_HF->Fill( float(lscounterM1) ,maxxOCCUP4);




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// test GS     
     htmlFileD << "<h2> 1. Gain Stability (GS) </h3>"<< std::endl;
     htmlFileD << "<h3> 1.A. Averaged channel response, collected over all TS, for Current run in each channel for each depth.</h3>"<< std::endl;
     htmlFileD << "<h4> Channel legend: colour means cooresponding value of mean response. </h4>"<< std::endl;
     if (sub==1)  htmlFileD << " <img src=\"MapRateAmpl1HB.png\" />" << std::endl; 
     if (sub==2)  htmlFileD << " <img src=\"MapRateAmpl1HE.png\" />" << std::endl;  
     if (sub==3)  htmlFileD << " <img src=\"MapRateAmpl1HO.png\" />" << std::endl;  
     if (sub==4)  htmlFileD << " <img src=\"MapRateAmpl1HF.png\" />" << std::endl;   
     htmlFileD << "<br>"<< std::endl; 
     htmlFileD << "<h3> 1.B. Averaged channel response, collected over all TS, for Reference run in each channel for each depth.</h3>"<< std::endl;
     htmlFileD << "<h4> Channel legend: colour means cooresponding value of mean response. </h4>"<< std::endl;
     if (sub==1)  htmlFileD << " <img src=\"MapRateAmpl2HB.png\" />" << std::endl; 
     if (sub==2)  htmlFileD << " <img src=\"MapRateAmpl2HE.png\" />" << std::endl;  
     if (sub==3)  htmlFileD << " <img src=\"MapRateAmpl2HO.png\" />" << std::endl;  
     if (sub==4)  htmlFileD << " <img src=\"MapRateAmpl2HF.png\" />" << std::endl;   
     htmlFileD << "<br>"<< std::endl; 
     htmlFileD << "<h3> 1.C. Relative difference between Current and Reference run distribution over all events, channels for each depth.</h3>"<< std::endl;
     htmlFileD << "<h4>  Legend: Bins less -"<<porog[sub]<<"% and more +"<<porog[sub]<<"% correpond to bad relative difference position </h4>"<< std::endl;
     if (sub==1)  htmlFileD << " <img src=\"HistAmplDriftDepthHB.png\" />" << std::endl; 
     if (sub==2)  htmlFileD << " <img src=\"HistAmplDriftDepthHE.png\" />" << std::endl; 
     if (sub==3)  htmlFileD << " <img src=\"HistAmplDriftDepthHO.png\" />" << std::endl; 
     if (sub==4)  htmlFileD << " <img src=\"HistAmplDriftDepthHF.png\" />" << std::endl;  
     htmlFileD << "<br>"<< std::endl; 
     htmlFileD << "<h3> 1.D. Rate of bad relative difference  (<-"<<porog[sub]<<", >+"<<porog[sub]<<") in each channel for each depth.</h3>"<< std::endl;
     htmlFileD << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
     if (sub==1)  htmlFileD << " <img src=\"MapRateAmplDriftHB.png\" />" << std::endl; 
     if (sub==2)  htmlFileD << " <img src=\"MapRateAmplDriftHE.png\" />" << std::endl;  
     if (sub==3)  htmlFileD << " <img src=\"MapRateAmplDriftHO.png\" />" << std::endl;  
     if (sub==4)  htmlFileD << " <img src=\"MapRateAmplDriftHF.png\" />" << std::endl;        
     htmlFileD << "<br>"<< std::endl;    
 

Map_Ampl[21][2][1] = (TH2F*)hfile->Get("h_mapDepth1AmplE34_HE");
Map_SUB[2][1] = (TH2F*)hfile->Get("h_mapDepth1_HE");
Map_Ampl[21][sub][k]->Divide(Map_Ampl[21][sub][k], Map_SUB[sub][k], 1, 1, "B");

  Map_RefAmpl[4][1] = (TH2F*)hreffile->Get("h_mapDepth1AmplE34_HF");
  Map_RefAmpl[4][2] = (TH2F*)hreffile->Get("h_mapDepth2AmplE34_HF");   

  Map_RefSUB[1][1] = (TH2F*)hreffile->Get("h_mapDepth1_HB");
  Map_RefSUB[1][2] = (TH2F*)hreffile->Get("h_mapDepth2_HB");   
///////////////////////////////////////////////////////////////////////////////////////////////////////////
=========================================================================================================
eoscms ls -l /eos/cms/store/group/dpg_hcal/comm_hcal/USC/USC_280702.root
eoscms ls -l /eos/cms/store/group/dpg_hcal/comm_hcal/USC

cmsStage /store/group/dpg_hcal/comm_hcal/USC/USC_280702.root .
cmsRun remoteMonitoring_TEST_cfg.py 280702 file:/afs/cern.ch/work/z/zhokin/hcal/cmt7/CMSSW_8_1_0_pre10/src/RecoHcal/HcalPromptAnalysis/test/RDM/ /store/group/dpg_hcal/comm_hcal/USC /afs/cern.ch/work/z/zhokin/hcal/cmt7/CMSSW_8_1_0_pre10/src/RecoHcal/HcalPromptAnalysis/test/RDM



///////////////////////////////////////////////////////////////////////////////////////////////////////////



/afs/cern.ch/cms/CAF/CMSALCA/ALCA_HCALCALIB/HCALMONITORING/RDMweb
histos/

Tier2:
cmsLs
/store/group/comm_hcal/USC
/store/group/comm_hcal/LS1
///////////////////////////////////////////////////////////////////////////////////////////////////////////
To access local data from eos just change the path to the config file like:

'root://eoscms//eos/cms/store/group/comm_hcal/LS1/USC_227727.root'

cmsRun remoteMonitoring_LED_cfg.py 211659 /store/group/comm_hcal/USC

///////////////////////////////////////////////////////////////////////////////////////////////////////////
==================================================================== hcal01
ssh cmshcal01.cern.ch
cd /bigspool/usc
ls -latr

lxplus443:
scp cmshcal01.cern.ch:/bigspool/usc/USC_210378.root /tmp/zhokin/.
scp cmshcal01.cern.ch:/bigspool/usc/USC_214153.root /tmp/zhokin/.
scp cmshcal01.cern.ch:/bigspool/usc/USC_213971.root /tmp/zhokin/.

scp cmshcal01.cern.ch:/bigspool/usc/USC_211154.root /tmp/zhokin/.
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////



